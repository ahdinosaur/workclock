"use strict";

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);
require("mocha-as-promised")();
var expect = chai.expect;
var Promise = require('bluebird');

var Edge = require('../Edge');
var Vertex = require('../Vertex');

describe("Edge", function () {
  var self = this;
  
  before(function (done) {
    Promise.all([
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
    ]).spread(function (n1, n2, n3, n4) {
      self.n1 = n1;
      self.n2 = n2;
      self.n3 = n3;
      self.n4 = n4;
      done();
    });
  });

  it("#save", function () {
    return new Edge({ sourceId: self.n1.id, targetId: self.n2.id })
    .save()
    .call('load', ['source', 'target'])
    .then(function (edge) {
      expect(edge).to.exist;
      expect(edge.related('source').id).to.equal(self.n1.id);
      expect(edge.toJSON()).to.have.deep.property('source.id', self.n1.id);
      expect(edge.related('target').id).to.equal(self.n2.id);
      expect(edge.toJSON()).to.have.deep.property('target.id', self.n2.id);

      var query = edge.query('where', 'sourceId', '=', self.n1.id)
      .query('andWhere', 'targetId', '=', self.n2.id)
      .fetch()
      .then(function (result) {
        return result.toJSON();
      });

      expect(query).to.eventually.have.property('sourceId', self.n1.id);
      expect(query).to.eventually.have.property('targetId', self.n2.id);

      return query;
    });
  });

  describe("relations", function () {
    before(function (done) {
      Promise.all([
        new Edge({ sourceId: self.n1.id, targetId: self.n2.id }).save(),
        new Edge({ sourceId: self.n2.id, targetId: self.n3.id }).save(),
        new Edge({ sourceId: self.n3.id, targetId: self.n4.id }).save(),
      ]).spread(function (a12, a23, a34) {
        self.a12 = a12;
        self.a23 = a23;
        self.a34 = a34;
        done();
      });
    });

    describe("#successors", function () {

      it("the successors of a12 should be [a23]", function () {
        return expect(self.a12.successors()).to.eventually.have.members([self.a23]);
      });

      it("the successors of a23 should be [a34]", function () {
        return expect(self.a23.successors()).to.eventually.have.members([self.a34]);
      });
    });

    describe("#predecessors", function () {

      it("the predecessors of a23 should be [a12]", function () {
        return expect(self.a23.predecessors()).to.eventually.have.members([self.a12]);
      });

      it("the predecessors of a34 should be [a23]", function () {
        return expect(self.a34.predecessors()).to.eventually.have.members([self.a23]);
      });
    });
  });
});
