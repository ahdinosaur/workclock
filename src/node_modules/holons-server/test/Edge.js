"use strict";

var expect = require('test').expect;
var Promise = require('bluebird');

var Edge = require('../Edge');
console.log(Edge.err);
var Vertex = require('../Vertex');

describe("Edge", function () {
  var self = this;
  
  before(function () {
    return Promise.all([
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
    ]).spread(function (n1, n2, n3, n4) {
      self.n1 = n1;
      self.n2 = n2;
      self.n3 = n3;
      self.n4 = n4;
    });
  });

  it("#save#destroy", function () {
    // create a new edge and save
    return new Edge({ sourceId: self.n1.id, targetId: self.n2.id })
    .save()
    .call('load', ['source', 'target'])
    .then(function (edge) {
      // check that new edge is as expected
      expect(edge).to.exist;
      expect(edge.related('source').id).to.equal(self.n1.id);
      expect(edge.toJSON()).to.have.deep.property('source.id', self.n1.id);
      expect(edge.related('target').id).to.equal(self.n2.id);
      expect(edge.toJSON()).to.have.deep.property('target.id', self.n2.id);

      // query for the edge
      return edge.query('where', 'sourceId', '=', self.n1.id)
      .query('andWhere', 'targetId', '=', self.n2.id)
      .fetch()

    }).then(function (edge) {
      // check that edge returned from query is as expected
      expect(edge.get('sourceId')).to.equal(self.n1.id);
      expect(edge.get('targetId')).to.equal(self.n2.id);

      // destroy the edge
      return edge.destroy();

    }).then(function (edge) {
      // query for the edge again
      return edge
      .query('where', 'sourceid', '=', self.n1.id)
      .query('andWhere', 'targetid', '=', self.n2.id)
      .fetch()

    }).then(function (result) {
      // check that result from query is as expected
      expect(result).to.equal(null);
    });
  });

  it("#save multiple", function () {
    return Promise.all([
      new Edge({ sourceId: self.n1.id, targetId: self.n2.id }).save(),
      new Edge({ sourceId: self.n2.id, targetId: self.n3.id }).save(),
      new Edge({ sourceId: self.n3.id, targetId: self.n4.id }).save(),
    ]).spread(function (a12, a23, a34) {
      self.a12 = a12;
      self.a23 = a23;
      self.a34 = a34;

      expect(a12).to.exist;
      expect(a23).to.exist;
      expect(a34).to.exist;
    });
  });

  describe("relations", function () {

    describe("#successors", function () {

      it("the successors of a12 should be [a23]", function () {
        console.log(self.a12.get('targetId'), self.a23.get('sourceId'));
        return expect(self.a12.successors()).to.eventually.have.members([self.a23]);
      });

      it("the successors of a23 should be [a34]", function () {
        return expect(self.a23.successors()).to.eventually.have.members([self.a34]);
      });
    });

    describe("#predecessors", function () {

      it("the predecessors of a23 should be [a12]", function () {
        return expect(self.a23.predecessors()).to.eventually.have.members([self.a12]);
      });

      it("the predecessors of a34 should be [a23]", function () {
        return expect(self.a34.predecessors()).to.eventually.have.members([self.a23]);
      });
    });
  });

  describe("DAG enforcement", function () {
    describe("#BackLoopError", function () {
      it("should raise error on back loop", function () {
        return expect(
          new Edge({ sourceId: self.n1.id, targetId: self.n1.id }).save()
        ).to.be.rejectedWith(Edge.Err.SelfLoopError);
      });
    });

    describe("#CyleError", function () {
      it("should raise error on cycle", function () {
        return expect(
          new Edge({ sourceId: self.n4.id, targetId: self.n1.id }).save()
        ).to.be.rejectedWith(Edge.Err.CycleError);
      });
    });

    describe("#MultiEdgeError", function () {
      it("should raise error on multi-edge", function () {
        return expect(
          new Edge({ sourceId: self.n1.id, targetId: self.n2.id }).save()
        ).to.be.rejectedWith(Edge.Err.MultiEdgeError);
      });
    });

    describe("#SelfLoopError", function () {
      it("should raise error on self loop", function () {
        return expect(
          new Edge({ sourceId: self.n1.id, targetId: self.n1.id }).save()
        ).to.be.rejectedWith(Edge.Err.SelfLoopError);
      });
    });
  });
});
