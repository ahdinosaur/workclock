"use strict";

var expect = require('chai').expect;
var Promise = require('bluebird');

var Edge = require('../Edge');
var Vertex = require('../Vertex');

describe("Edge", function () {
  var self = this;
  
  before(function (done) {
    Promise.all([
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
    ]).spread(function (n1, n2, n3, n4) {
      self.n1 = n1;
      self.n2 = n2;
      self.n3 = n3;
      self.n4 = n4;
      done();
    });
  });

  it("a single edge should be creatable", function (done) {
    new Edge({ sourceId: self.n1.id, targetId: self.n2.id })
    .save()
    .then(function (preloadedEdge) {
      preloadedEdge.load(['source', 'target']).then(function (arc) {
        expect(arc).to.exist;
        expect(arc.related('source').id).to.equal(self.n1.id);
        expect(arc.related('target').id).to.equal(self.n2.id);

        arc.query(function (qb) {
          qb.where('sourceId', '=', self.n1.id)
          .andWhere('targetId', '=', self.n2.id)
          .then(function (result) {
            var resultEdge = result[0];
            expect(resultEdge).to.exist;
            expect(resultEdge.sourceId).to.equal(self.n1.id);
            expect(resultEdge.targetId).to.equal(self.n2.id);
            done();
          });
        });
      });
    });
  });
});
