var Promise = require('bluebird');

var sql = require('sql');
var expect = require('test').expect;

var Edge = sql.Model.extend({
  tableName: 'edges',
  source: function () {
    return this.belongsTo(Vertex, 'sourceId');
  },
  target: function () {
    return this.belongsTo(Vertex, 'targetId');
  },
});

var Vertex = sql.Model.extend({
  tableName: 'vertexes',
  in: function () {
    return this.hasMany(Edge, 'targetId');
  },
  out: function () {
    return this.hasMany(Edge, 'sourceId');
  },
  parents: function () {
    return this.hasMany(Vertex, 'targetId').through(Edge, 'id', 'sourceId');
  },
  children: function () {
    return this.hasMany(Vertex, 'sourceId').through(Edge, 'id', 'targetId');
  },
});

describe("Vertex", function () {
  var self = this;

  before(function () {
    return Promise.all([
      // burn some Vertex's to offset the ids
      // between Vertex and Edge
      new Vertex().save().call('destroy'),
      new Vertex().save().call('destroy'),
      new Vertex().save().call('destroy'),
      new Vertex().save().call('destroy'),
      // end Vertex burn
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
    ]).spread(function (a, b, c, d, n1, n2, n3) {
      self.n1 = n1;
      self.n2 = n2;
      self.n3 = n3;

      return Promise.all([
        n1.children().attach([n2]),
        n2.children().attach([n3]),
      ]);
    });
  });

  describe("children", function () {
    it("of n2 should be [n3]", function () {
      return self.n2.load(['children']).then(function (vertex) {
        var children = vertex.related('children');
        expect(children).to.have.length(1);
        expect(children.models[0].id).to.equal(self.n3.id);
      });
    });
  });

  describe("parents", function () {
    it("of n2 should be [n1]", function () {
      return self.n2.load(['parents']).then(function (vertex) {
        var parents = vertex.related('parents');
        expect(parents).to.have.length(1);
        expect(parents.models[0].id).to.equal(self.n1.id);
      });
    });
  });
});