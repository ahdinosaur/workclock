/*
how to run example:

git clone https://github.com/holonomy/tasks
cd tasks
git checkout 0211482b8168755eb70f63279efc4d44e68e4c82
npm install bookshelf knex sqlite3 bluebird mocha mocha-as-promised chai chai-as-promised
NODE_ENV=test npm run migrate && NODE_ENV=test node_modules/.bin/mocha -t 10s src/node_modules/holons-server/test/example.js

*/

var Promise = require('bluebird');

var sql = require('sql');
var expect = require('test').expect;

var Edge = sql.Model.extend({
  tableName: 'edges',
  initialize: function () {
    this.on('saving', this.preventSelfLoop, this);
  },
  preventSelfLoop: function () {
    if (this.get('targetId') === this.get('sourceId')) {
      return Promise.reject();
    }
  },
});

var Vertex = sql.Model.extend({
  tableName: 'vertexes',
  parents: function () {
    return this.belongsToMany(Vertex).through(Edge, 'targetId', 'sourceId');
  },
  children: function () {
    return this.belongsToMany(Vertex).through(Edge, 'sourceId', 'targetId');
  },
});

describe("Edge", function () {
  var self = this;

  before(function () {
    return Promise.all([
      new Vertex().save(),
      new Vertex().save(),
      new Vertex().save(),
    ]).spread(function (n1, n2, n3) {
      self.n1 = n1;
      self.n2 = n2;
      self.n3 = n3;
    });
  });

  describe("validation", function () {

    it("should raise error when `save`ing bad Edge", function () {
      return expect(
        new Edge({ sourceId: self.n1, targetId: self.n1 }).save()
      ).to.be.rejected;
    });

    it("should raise error when `attach`ing bad Edge", function () {
      return expect(
        self.n1.parents().attach(self.n1)
      ).to.be.rejected;
    });
  });

  after(function () {
    return Promise.all([
      self.n1.destroy(),
      self.n2.destroy(),
      self.n3.destroy(),
    ]);
  });
});