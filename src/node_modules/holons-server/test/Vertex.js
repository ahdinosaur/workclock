"use strict";

var expect = require('test').expect;
var Promise = require('bluebird');

var Edge = require('../Edge');
var Vertex = require('../Vertex');

describe("Vertex", function () {
  var self = this;

  describe("#save#destroy", function () {
    it("#save#destroy", function () {
      // create a new edge and save
      return new Vertex()
      .save()
      .then(function (edge) {
        // check that new edge is as expected
        expect(edge).to.exist;

        // query for the edge
        return edge.query('where', 'id', '=', edge.id)
        .fetch()

      }).then(function (edge) {
        // check that edge returned from query is as expected
        expect(edge).to.exist;

        // destroy the edge
        return edge.destroy();

      }).then(function (edge) {
        // query for the edge again
        return edge.query('where', 'id', '=', edge.id)
        .fetch()

      }).then(function (result) {
        // check that result from query is as expected
        expect(result).to.not.exist;
      });
    });
  });
  
  describe("relations", function () {
    before(function () {
      return Promise.all([
        new Vertex().save(),
        new Vertex().save(),
        new Vertex().save(),
        new Vertex().save(),
      ]).spread(function (n1, n2, n3, n4) {
        self.n1 = n1;
        self.n2 = n2;
        self.n3 = n3;
        self.n4 = n4;

        return Promise.all([
          new Edge({ sourceId: self.n1.id, targetId: self.n2.id }).save(),
          new Edge({ sourceId: self.n2.id, targetId: self.n3.id }).save(),
          new Edge({ sourceId: self.n3.id, targetId: self.n4.id }).save(),
        ]).spread(function (a12, a23, a34) {
          self.a12 = a12;
          self.a23 = a23;
          self.a34 = a34;
        });
      });
    });

    describe("in", function () {

      it("n2.out should be n2->n3 edge", function () {
        self.n2.load(['out']).then(function (vertex) {
          expect(vertex.related('out').toJSON()).to.deep.equal([self.a23.toJSON()]);
        });
      });
    });

    after(function () {
      return Promise.all([
        self.n1.destroy(),
        self.n2.destroy(),
        self.n3.destroy(),
        self.a12.destroy(),
        self.a23.destroy(),
        self.a34.destroy(),
      ]);
    });
  });
});