"use strict";

/* code ported from https://github.com/DrTom/digraph-demo/blob/master/app/models/arc.rb */

var Promise = require('bluebird');
var sql = require('sql');
var createError = require('create-error');

var Vertex = require('./Vertex');

var NonDAGError = createError('NonDAGError');

var Edge = module.exports = sql.Model.extend({
  tableName: 'holon_arcs',
  initialize: function () {
    this.on('saving', this.preventBackLoop);
    this.on('saving', this.preventCycle);
    this.on('saving', this.preventMultiEdge);
    this.on('saving', this.preventSelfLoop);
  },
  source: function () {
    return this.belongsTo(Vertex, 'sourceId');
  },
  target: function () {
    return this.belongsTo(Vertex, 'targetId');
  },
  successors: function () {
    var Edges = require('./Edges');
    return new Edges().query('whereIn', 'sourceId', [this.get('targetId')]);
  },
  predecessors: function () {
    var Edges = require('./Edges');
    return new Edges().query('whereIn', 'targetId', [this.get('sourceId')]);
  },
  preventBackLoop: function () {
    return this
    .query('where', 'targetId', this.get('sourceId'))
    .query('andWhere', 'sourceId', this.get('targetId'))
    .fetch()
    .then(function (result) {
      if (result !== null) {
        return Promise.reject(new Edge.Err.BackLoopError);
      }
    });
  },
  preventCycle: function () {
    return;
  },
  preventMultiEdge: function () {
    return this
    .query('where', 'targetId', this.get('targetId'))
    .query('andWhere', 'sourceId', this.get('sourceId'))
    .fetch()
    .then(function (result) {
      if (result !== null) {
        return Promise.reject(new Edge.Err.MultiEdgeError);
      }
    });
  },
  preventSelfLoop: function () {
    if (this.get('targetId') === this.get('sourceId')) {
      return Promise.reject(new Edge.Err.SelfLoopError);
    }
  },
}, {
  Err: {
    NonDAGError: NonDAGError,
    BackLoopError: createError(NonDAGError, "BackLoopError", {
      message: "back loops are not allowed.",
    }),
    CycleError: createError(NonDAGError, "CycleError", {
      message: "cycles are not allowed.",
    }),
    MultiEdgeError: createError(NonDAGError, "MultiEdgeError", {
      message: "multi-edges are not allowed.",
    }),
    SelfLoopError: createError(NonDAGError, "SelfLoopError", {
      message: "self loops are not allowed.",
    }),
  },
});
