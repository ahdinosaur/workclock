"use strict";

var React = require('react');
var expect = require('chai').expect;
var sinon = require('sinon');

var Task = require('../Task');
var TaskList = require('../TaskList');
var TaskListView = require('../TaskListView');

describe("TaskListView", function() {
  var taskListView, taskList;

  before(function() {
    // create element for task view to bind to
    var taskEl = document.createElement('div');
    taskEl.className = 'tasks';
    document.body.appendChild(taskEl);

    // create new task list and reset
    taskList = new TaskList();
    taskList.reset();

    // create new task view
    taskListView = TaskListView({ model: taskList });

    // render task view
    React.renderComponent(taskListView, taskEl);
  });

  describe('clicking the plus button twice', function() {

    before(function() {

      // create a new initialize function for task model
      // that will allow us to spy on .save()
      var init = Task.prototype.initialize;
      Task.prototype.initialize = function () {
        sinon.spy(this, 'save');
        init.apply(this, arguments);
      };

      sinon.spy(taskList, 'add');
      taskView.getDOMNode().querySelector('button.add').click();
      taskView.getDOMNode().querySelector('button.add').click();
    });

    it("should create two empty tasks", function() {
      expect(taskList.add.calledTwice).to.be.true;
      expect(taskView.getDOMNode().querySelectorAll('form.task-form').length).to.equal(2);
      expect(taskList.models.length).to.equal(2);
    });

    it("should not save the tasks to the server", function() {
      expect(taskList.models[0].save.called).to.be.false;
      expect(taskList.models[1].save.called).to.be.false;
    });
    
    /*
    describe("editing the task", function() {
      beforeEach(function() {

      });

      it("should save the task to the server", function() {

      });
    });
    */
  });
});
